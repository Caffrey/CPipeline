// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}



#pragma kernel KernelFunction_A
#pragma kernel KernelFunction_B

RWStructuredBuffer<int> intBuffer;
int intValue;
float floatValue;

[numthreads(4,1,1)]
void KernelFunction_A(uint3 groupID:SV_GROUPID, uint3 groupThreadID:SV_GROUPTHREADID)
{
    intBuffer[groupThreadID.x] = groupThreadID.x * intValue;
}

[numthreads(4,1,1)]
void KernelFunction_B(uint3 groupID:SV_GROUPID, uint3 groupThreadID:SV_GROUPTHREADID)
{
    intBuffer[groupThreadID.x] += 1;
}

#pragma kernel KernelFunction_C
RWTexture2D<float4> textureBuffer;
[numthreads(8,8,1)]
void KernelFunction_C(uint3 dispatchThreadID : SV_DISPATCHTHREADID)
{
    float width,height;
    textureBuffer.GetDimensions(width,height);
    float value = dispatchThreadID.x/width;
    textureBuffer[dispatchThreadID.xy] = float4(value,value,value,1);

}
